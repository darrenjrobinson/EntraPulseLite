const{contextBridge,ipcRenderer}=require("electron");contextBridge.exposeInMainWorld("electron",{getAssetPath:e=>ipcRenderer.invoke("app:getAssetPath",e),openExternal:e=>ipcRenderer.invoke("shell:openExternal",e)}),contextBridge.exposeInMainWorld("electronAPI",{auth:{login:()=>ipcRenderer.invoke("auth:login"),logout:()=>ipcRenderer.invoke("auth:logout"),getToken:()=>ipcRenderer.invoke("auth:getToken"),getCurrentUser:()=>ipcRenderer.invoke("auth:getCurrentUser"),getIdTokenClaims:()=>ipcRenderer.invoke("auth:getIdTokenClaims"),requestPermissions:e=>ipcRenderer.invoke("auth:requestPermissions",e),getTokenWithPermissions:e=>ipcRenderer.invoke("auth:getTokenWithPermissions",e),getAuthenticationInfo:()=>ipcRenderer.invoke("auth:getAuthenticationInfo"),getTokenPermissions:()=>ipcRenderer.invoke("auth:getTokenPermissions"),getCurrentGraphPermissions:()=>ipcRenderer.invoke("auth:getCurrentGraphPermissions"),getTenantInfo:()=>ipcRenderer.invoke("auth:getTenantInfo"),clearTokenCache:()=>ipcRenderer.invoke("auth:clearTokenCache"),forceReauthentication:()=>ipcRenderer.invoke("auth:forceReauthentication"),testConfiguration:e=>ipcRenderer.invoke("auth:testConfiguration",e)},graph:{query:(e,r,n)=>ipcRenderer.invoke("graph:query",e,r,n),getUserPhoto:e=>ipcRenderer.invoke("graph:getUserPhoto",e),clearPhotoCache:()=>ipcRenderer.invoke("graph:clearPhotoCache"),clearUserPhotoCache:e=>ipcRenderer.invoke("graph:clearUserPhotoCache",e),getPhotoCacheStats:()=>ipcRenderer.invoke("graph:getPhotoCacheStats")},llm:{chat:(e,r)=>ipcRenderer.invoke("llm:chat",e,r),isAvailable:()=>ipcRenderer.invoke("llm:isAvailable"),isLocalAvailable:()=>ipcRenderer.invoke("llm:isLocalAvailable"),testConnection:e=>ipcRenderer.invoke("llm:testConnection",e),getAvailableModels:e=>ipcRenderer.invoke("llm:getAvailableModels",e),testProviderConnection:(e,r)=>ipcRenderer.invoke("llm:testProviderConnection",e,r),getProviderModels:(e,r)=>ipcRenderer.invoke("llm:getProviderModels",e,r)},mcp:{call:(e,r,n)=>ipcRenderer.invoke("mcp:call",e,r,n),listServers:()=>ipcRenderer.invoke("mcp:listServers"),listTools:e=>ipcRenderer.invoke("mcp:listTools",e),restartLokkaMCPServer:()=>ipcRenderer.invoke("mcp:restartLokkaMCPServer")},config:{get:()=>ipcRenderer.invoke("config:get"),update:e=>ipcRenderer.invoke("config:update",e),getLLMConfig:()=>ipcRenderer.invoke("config:getLLMConfig"),saveLLMConfig:e=>ipcRenderer.invoke("config:saveLLMConfig",e),clearModelCache:e=>ipcRenderer.invoke("config:clearModelCache",e),getCachedModels:e=>ipcRenderer.invoke("config:getCachedModels",e),saveCloudProviderConfig:(e,r)=>ipcRenderer.invoke("config:saveCloudProviderConfig",e,r),getCloudProviderConfig:e=>ipcRenderer.invoke("config:getCloudProviderConfig",e),getConfiguredCloudProviders:()=>ipcRenderer.invoke("config:getConfiguredCloudProviders"),setDefaultCloudProvider:e=>ipcRenderer.invoke("config:setDefaultCloudProvider",e),getDefaultCloudProvider:()=>ipcRenderer.invoke("config:getDefaultCloudProvider"),removeCloudProviderConfig:e=>ipcRenderer.invoke("config:removeCloudProviderConfig",e),getEntraConfig:()=>ipcRenderer.invoke("config:getEntraConfig"),saveEntraConfig:e=>ipcRenderer.invoke("config:saveEntraConfig",e),clearEntraConfig:()=>ipcRenderer.invoke("config:clearEntraConfig")},updater:{checkForUpdates:()=>ipcRenderer.invoke("updater:checkForUpdates"),downloadUpdate:()=>ipcRenderer.invoke("updater:downloadUpdate"),installUpdate:()=>ipcRenderer.invoke("updater:installUpdate"),getCurrentVersion:()=>ipcRenderer.invoke("updater:getCurrentVersion"),isUpdatePending:()=>ipcRenderer.invoke("updater:isUpdatePending"),setAutoUpdateEnabled:e=>ipcRenderer.invoke("updater:setAutoUpdateEnabled",e),getAutoUpdateEnabled:()=>ipcRenderer.invoke("updater:getAutoUpdateEnabled")},on:(e,r)=>{if(["auth-status-changed","chat-message","graph-api-call","config:defaultCloudProviderChanged","auth:configurationAvailable","llm:forceStatusRefresh","update:checking-for-update","update:available","update:not-available","update:error","update:download-progress","update:downloaded"].includes(e)){const n=ipcRenderer.listenerCount(e);ipcRenderer.removeListener(e,r),n>25&&(console.warn(`Too many listeners for ${e} (${n}). Performing aggressive cleanup...`),ipcRenderer.removeAllListeners(e)),ipcRenderer.on(e,r);const o=ipcRenderer.listenerCount(e),i=ipcRenderer.getMaxListeners();if(o>=i-2){const r=Math.min(i+5,50);ipcRenderer.setMaxListeners(r),console.log(`Increased max listeners for channel ${e} to ${r}. Current: ${o}`)}console.log(`Added listener for ${e}. Before: ${n}, After: ${o}`)}},removeListener:(e,r)=>{["auth-status-changed","chat-message","graph-api-call","config:defaultCloudProviderChanged","auth:configurationAvailable","llm:forceStatusRefresh","update:checking-for-update","update:available","update:not-available","update:error","update:download-progress","update:downloaded"].includes(e)&&ipcRenderer.removeListener(e,r)},removeAllListeners:e=>{["auth-status-changed","chat-message","graph-api-call","config:defaultCloudProviderChanged","auth:configurationAvailable","llm:forceStatusRefresh","update:checking-for-update","update:available","update:not-available","update:error","update:download-progress","update:downloaded"].includes(e)&&ipcRenderer.removeAllListeners(e)},getListenerDiagnostics:()=>{const e={};return["auth-status-changed","chat-message","graph-api-call","config:defaultCloudProviderChanged","auth:configurationAvailable","llm:forceStatusRefresh","update:checking-for-update","update:available","update:not-available","update:error","update:download-progress","update:downloaded"].forEach((r=>{e[r]={count:ipcRenderer.listenerCount(r),maxListeners:ipcRenderer.getMaxListeners()}})),e},forceCleanupListeners:e=>{if(["auth-status-changed","chat-message","graph-api-call","config:defaultCloudProviderChanged","auth:configurationAvailable","llm:forceStatusRefresh"].includes(e)){const r=ipcRenderer.listenerCount(e);ipcRenderer.removeAllListeners(e);const n=ipcRenderer.listenerCount(e);return console.log(`Force cleaned ${e}: ${r} -> ${n} listeners`),{before:r,after:n}}return null}});