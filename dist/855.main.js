"use strict";exports.id=855,exports.ids=[855],exports.modules={4855:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval("\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  MicrosoftDocsMCPClient: () => (/* binding */ MicrosoftDocsMCPClient)\n});\n\n;// ./src/mcp/clients/HttpStreamableMCPClient.ts\nclass HttpStreamableMCPClient {\n    constructor(serverConfig, authService) {\n        this.sessionId = null;\n        this.requestId = 1;\n        this.serverConfig = serverConfig;\n        this.authService = authService;\n        this.baseUrl = serverConfig.url || 'https://learn.microsoft.com/api/mcp';\n    }\n    /**\n     * Initialize the MCP client and perform handshake with the server\n     */\n    async initialize() {\n        try {\n            const initRequest = {\n                jsonrpc: '2.0',\n                id: this.getNextId(),\n                method: 'initialize',\n                params: {\n                    protocolVersion: '2024-11-05',\n                    capabilities: {\n                        tools: {},\n                        resources: {},\n                        sampling: {}\n                    },\n                    clientInfo: {\n                        name: 'EntraPulseLite',\n                        version: '1.0.0-beta.1'\n                    }\n                }\n            };\n            console.log('üîå Initializing HTTP Streamable MCP client for:', this.baseUrl);\n            const response = await this.sendRequest(initRequest);\n            if (response.error) {\n                throw new Error(`Initialization failed: ${response.error.message}`);\n            }\n            console.log('‚úÖ HTTP Streamable MCP client initialized successfully');\n        }\n        catch (error) {\n            console.error('‚ùå Failed to initialize HTTP Streamable MCP client:', error);\n            throw error;\n        }\n    }\n    /**\n     * List available tools from the MCP server\n     */\n    async listTools() {\n        const request = {\n            jsonrpc: '2.0',\n            id: this.getNextId(),\n            method: 'tools/list',\n            params: {}\n        };\n        const response = await this.sendRequest(request);\n        if (response.error) {\n            throw new Error(`Failed to list tools: ${response.error.message}`);\n        }\n        return response.result?.tools || [];\n    }\n    /**\n     * Call a tool on the MCP server\n     */\n    async callTool(toolName, arguments_) {\n        const request = {\n            jsonrpc: '2.0',\n            id: this.getNextId(),\n            method: 'tools/call',\n            params: {\n                name: toolName,\n                arguments: arguments_\n            }\n        };\n        console.log(`üîß HTTP Streamable MCP calling tool \"${toolName}\" with args:`, arguments_);\n        const response = await this.sendRequest(request);\n        if (response.error) {\n            throw new Error(`Tool call failed: ${response.error.message}`);\n        }\n        console.log(`‚úÖ HTTP Streamable MCP tool \"${toolName}\" completed successfully`);\n        return response.result;\n    }\n    /**\n     * List available resources from the MCP server\n     */\n    async listResources() {\n        const request = {\n            jsonrpc: '2.0',\n            id: this.getNextId(),\n            method: 'resources/list',\n            params: {}\n        };\n        const response = await this.sendRequest(request);\n        if (response.error) {\n            throw new Error(`Failed to list resources: ${response.error.message}`);\n        }\n        return response.result?.resources || [];\n    }\n    /**\n     * Get the contents of a specific resource\n     */\n    async readResource(uri) {\n        const request = {\n            jsonrpc: '2.0',\n            id: this.getNextId(),\n            method: 'resources/read',\n            params: {\n                uri\n            }\n        };\n        const response = await this.sendRequest(request);\n        if (response.error) {\n            throw new Error(`Failed to read resource: ${response.error.message}`);\n        }\n        return response.result;\n    }\n    /**\n     * Send HTTP Streamable request to the MCP server\n     */\n    async sendRequest(request) {\n        try {\n            const headers = {\n                'Content-Type': 'application/json',\n                'Accept': 'application/json, text/event-stream',\n                'User-Agent': 'MCP-Client/1.0.0-beta.1'\n            };\n            // Add session ID if we have one\n            if (this.sessionId) {\n                headers['Mcp-Session-Id'] = this.sessionId;\n            }\n            // Add authentication headers if needed\n            if (this.serverConfig.authConfig?.type !== 'none') {\n                try {\n                    const authHeaders = await this.authService.getAuthHeaders('microsoft-docs');\n                    Object.assign(headers, authHeaders);\n                }\n                catch (authError) {\n                    console.warn('Failed to get auth headers for Microsoft Docs MCP:', authError);\n                    // Continue without auth headers as Microsoft Docs MCP may not require authentication\n                }\n            }\n            console.log('üåê Sending HTTP Streamable MCP request:', {\n                url: this.baseUrl,\n                method: request.method,\n                id: request.id,\n                hasSessionId: !!this.sessionId,\n                headers: Object.keys(headers),\n                bodyPreview: JSON.stringify(request).substring(0, 200)\n            });\n            const response = await fetch(this.baseUrl, {\n                method: 'POST',\n                headers,\n                body: JSON.stringify(request)\n            });\n            // Log response details for debugging\n            console.log('üì° Received response:', {\n                status: response.status,\n                statusText: response.statusText,\n                contentType: response.headers.get('Content-Type'),\n                hasSessionId: !!response.headers.get('Mcp-Session-Id')\n            });\n            // Check for session ID in response headers\n            const responseSessionId = response.headers.get('Mcp-Session-Id');\n            if (responseSessionId && !this.sessionId) {\n                this.sessionId = responseSessionId;\n                console.log('üìù Received session ID from server:', responseSessionId);\n            }\n            if (!response.ok) {\n                // For debugging 406 errors, try to get response body\n                let errorDetails = `HTTP ${response.status}: ${response.statusText}`;\n                try {\n                    const errorBody = await response.text();\n                    if (errorBody) {\n                        errorDetails += ` - Response: ${errorBody}`;\n                        console.log('‚ùå Error response body:', errorBody);\n                    }\n                }\n                catch (e) {\n                    console.log('‚ùå Could not read error response body');\n                }\n                throw new Error(errorDetails);\n            }\n            const contentType = response.headers.get('Content-Type') || '';\n            // Handle SSE stream response\n            if (contentType.includes('text/event-stream')) {\n                console.log('üì° Received SSE stream response, parsing...');\n                return await this.parseSSEResponse(response);\n            }\n            // Handle JSON response\n            const data = await response.json();\n            console.log('üì® Received JSON response:', {\n                hasResult: !!data.result,\n                hasError: !!data.error,\n                id: data.id\n            });\n            return data;\n        }\n        catch (error) {\n            console.error('‚ùå HTTP Streamable MCP request failed:', error);\n            throw new Error(`HTTP Streamable MCP request failed: ${error.message}`);\n        }\n    }\n    /**\n     * Parse Server-Sent Events response\n     */\n    async parseSSEResponse(response) {\n        const reader = response.body?.getReader();\n        if (!reader) {\n            throw new Error('No response body for SSE stream');\n        }\n        const decoder = new TextDecoder();\n        let buffer = '';\n        let lastResponse = null;\n        try {\n            while (true) {\n                const { done, value } = await reader.read();\n                if (done)\n                    break;\n                buffer += decoder.decode(value, { stream: true });\n                const lines = buffer.split('\\n');\n                buffer = lines.pop() || ''; // Keep incomplete line in buffer\n                for (const line of lines) {\n                    if (line.startsWith('data: ')) {\n                        const data = line.slice(6);\n                        if (data === '[DONE]') {\n                            return lastResponse || { jsonrpc: '2.0', id: 0, error: { code: -1, message: 'No response received' } };\n                        }\n                        try {\n                            const jsonData = JSON.parse(data);\n                            if (jsonData.jsonrpc) {\n                                lastResponse = jsonData;\n                            }\n                        }\n                        catch (parseError) {\n                            console.warn('Failed to parse SSE data:', data);\n                        }\n                    }\n                }\n            }\n            return lastResponse || { jsonrpc: '2.0', id: 0, error: { code: -1, message: 'No valid response received' } };\n        }\n        finally {\n            reader.releaseLock();\n        }\n    }\n    /**\n     * Get next request ID\n     */\n    getNextId() {\n        return this.requestId++;\n    }\n    /**\n     * Check if the server is healthy and responding\n     */\n    async healthCheck() {\n        try {\n            await this.listTools();\n            return true;\n        }\n        catch (error) {\n            console.error('HTTP Streamable MCP health check failed:', error);\n            return false;\n        }\n    }\n}\n\n;// ./src/mcp/clients/MicrosoftDocsMCPClient.ts\n\nclass MicrosoftDocsMCPClient {\n    constructor(serverConfig, authService) {\n        this.httpClient = new HttpStreamableMCPClient(serverConfig, authService);\n    }\n    /**\n     * Initialize the MCP client and perform handshake with the server\n     */\n    async initialize() {\n        return this.httpClient.initialize();\n    }\n    /**\n     * List available tools from Microsoft Docs MCP server\n     */\n    async listTools() {\n        return this.httpClient.listTools();\n    }\n    /**\n     * Call a tool on the Microsoft Docs MCP server\n     */\n    async callTool(toolName, arguments_) {\n        return this.httpClient.callTool(toolName, arguments_);\n    }\n    /**\n     * List available resources from Microsoft Docs MCP server\n     */\n    async listResources() {\n        return this.httpClient.listResources();\n    }\n    /**\n     * Get the contents of a specific resource\n     */\n    async readResource(uri) {\n        return this.httpClient.readResource(uri);\n    }\n    /**\n     * Check if the server is healthy and responding\n     */\n    async healthCheck() {\n        return this.httpClient.healthCheck();\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///4855\n")}};