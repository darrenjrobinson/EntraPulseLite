name: Multi-Platform Signed Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0-beta.1)'
        required: true
        type: string
      prerelease:
        description: 'Mark as pre-release'
        required: false
        default: true
        type: boolean

jobs:
  # Create tag and prepare release first
  create-release:
    runs-on: ubuntu-latest
    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Validate version format
        run: |
          if [[ ! "${{ github.event.inputs.version }}" =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9.-]+)?$ ]]; then
            echo "Invalid version format. Expected: v1.0.0 or v1.0.0-beta.1"
            exit 1
          fi

      - name: Create and push tag
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Check if tag already exists
          if git rev-parse "${{ github.event.inputs.version }}" >/dev/null 2>&1; then
            echo "Tag ${{ github.event.inputs.version }} already exists. Deleting and recreating..."
            git tag -d "${{ github.event.inputs.version }}" || true
            git push origin :refs/tags/${{ github.event.inputs.version }} || true
          fi
          
          # Delete existing GitHub release if it exists
          gh release delete "${{ github.event.inputs.version }}" --yes --cleanup-tag || true
          
          # Create new tag
          git tag ${{ github.event.inputs.version }}
          git push origin ${{ github.event.inputs.version }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate Release README
        run: |
          BUILD_TYPE="Multi-Platform Release"
          if [ "${{ github.event.inputs.prerelease }}" = "true" ]; then
            BUILD_TYPE="Multi-Platform Beta Release"
          fi
          RELEASE_NOTES="Multi-platform release with Windows code signing. See commit history for detailed changes."
          node scripts/generate-release-readme.js "${{ github.event.inputs.version }}" "$BUILD_TYPE" "$RELEASE_NOTES"

      - name: Upload Release README
        run: |
          if [ -f "RELEASE-README.md" ]; then
            gh release create "${{ github.event.inputs.version }}" "RELEASE-README.md" \
              --title "${{ github.event.inputs.version }}" \
              --notes "Release README and download guide attached. Build artifacts will be uploaded by platform-specific jobs." \
              --draft
            echo "✅ Release created with README"
          else
            echo "⚠️ RELEASE-README.md not found"
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Windows - Code signed with DigiCert certificate
  windows-signed:
    needs: create-release
    runs-on: windows-latest
    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.version }}
          fetch-depth: 0

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci --legacy-peer-deps --no-audit --no-fund
        env:
          NODE_OPTIONS: --max-old-space-size=8192

      - name: Run tests (skip problematic ones)
        run: npm run test:ci
        env:
          CI: true
          NODE_OPTIONS: --max-old-space-size=4096

      - name: Build application (Windows signed)
        run: npm run build && npx electron-builder --win --publish=always
        env:
          NODE_OPTIONS: --max-old-space-size=8192
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          WIN_CSC_LINK: ${{ secrets.WIN_CSC_LINK }}
          WIN_CSC_KEY_PASSWORD: ${{ secrets.WIN_CSC_KEY_PASSWORD }}

  # macOS - Unsigned (or add Apple certificates later)
  macos-unsigned:
    needs: create-release
    runs-on: macos-latest
    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.version }}
          fetch-depth: 0

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci --legacy-peer-deps --no-audit --no-fund
        env:
          NODE_OPTIONS: --max-old-space-size=8192

      - name: Run tests (skip problematic ones)
        run: npm run test:ci
        env:
          CI: true
          NODE_OPTIONS: --max-old-space-size=4096

      - name: Build application (macOS unsigned)
        run: npm run build && npx cross-env CSC_IDENTITY_AUTO_DISCOVERY=false electron-builder --mac --publish=always
        env:
          NODE_OPTIONS: --max-old-space-size=8192
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Linux - Unsigned (Linux typically doesn't use code signing)
  linux-unsigned:
    needs: create-release
    runs-on: ubuntu-latest
    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.version }}
          fetch-depth: 0

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci --legacy-peer-deps --no-audit --no-fund
        env:
          NODE_OPTIONS: --max-old-space-size=8192

      - name: Run tests (skip problematic ones)
        run: npm run test:ci
        env:
          CI: true
          NODE_OPTIONS: --max-old-space-size=4096

      - name: Build application (Linux unsigned)
        run: npm run build && npx cross-env CSC_IDENTITY_AUTO_DISCOVERY=false electron-builder --linux --publish=always
        env:
          NODE_OPTIONS: --max-old-space-size=8192
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Mark release as prerelease if specified and undraft
  finalize-release:
    needs: [windows-signed, macos-unsigned, linux-unsigned]
    runs-on: ubuntu-latest
    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.version }}
          fetch-depth: 0

      - name: Finalize release
        run: |
          if [ "${{ github.event.inputs.prerelease }}" = "true" ]; then
            gh release edit "${{ github.event.inputs.version }}" --prerelease --draft=false
            echo "✅ Release marked as prerelease and published"
          else
            gh release edit "${{ github.event.inputs.version }}" --draft=false
            echo "✅ Release published as stable"
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
