name: Beta Release (Minimal)

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0-beta.1)'
        required: true
        type: string
      prerelease:
        description: 'Mark as pre-release'
        required: false
        default: true
        type: boolean

jobs:
  create-release:
    runs-on: ubuntu-latest
    
    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Validate version format
        run: |
          if [[ ! "${{ github.event.inputs.version }}" =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9.-]+)?$ ]]; then
            echo "Invalid version format. Expected: v1.0.0 or v1.0.0-beta.1"
            exit 1
          fi

      - name: Delete existing release if it exists
        run: |
          # Delete existing GitHub release if it exists
          gh release delete ${{ github.event.inputs.version }} --yes || echo "Release doesn't exist"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create and push tag
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Delete existing tag if it exists (locally and remotely)
          git tag -d ${{ github.event.inputs.version }} || echo "Local tag doesn't exist"
          git push origin :refs/tags/${{ github.event.inputs.version }} || echo "Remote tag doesn't exist"
          
          # Create new tag
          git tag ${{ github.event.inputs.version }}
          git push origin ${{ github.event.inputs.version }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  windows-release:
    needs: create-release
    runs-on: windows-latest
    
    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.version }}
          fetch-depth: 0

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Clean npm cache
        run: npm cache clean --force

      - name: Install dependencies
        run: |
          npm ci --no-audit --no-fund --legacy-peer-deps --silent
          npm ls --depth=0 || true
        env:
          NODE_OPTIONS: "--max-old-space-size=4096"
          NPM_CONFIG_LOGLEVEL: "error"

      - name: Update version in source files
        run: |
          # Update package.json
          npm version --no-git-tag-version ${{ github.event.inputs.version }}
          
          # Update version.ts (remove 'v' prefix for source file)  
          $version = "${{ github.event.inputs.version }}" -replace '^v', ''
          
          # Update src/shared/version.ts
          if (Test-Path "src/shared/version.ts") {
            (Get-Content "src/shared/version.ts") -replace "export const VERSION = .*", "export const VERSION = '$version';" | Set-Content "src/shared/version.ts"
          }

      - name: Set prerelease flag
        if: ${{ github.event.inputs.prerelease == 'true' }}
        run: |
          node -e "
            const pkg = require('./package.json');
            if (!pkg.build) pkg.build = {};
            if (!pkg.build.publish) pkg.build.publish = {};
            pkg.build.publish.releaseType = 'prerelease';
            require('fs').writeFileSync('./package.json', JSON.stringify(pkg, null, 2) + '\n');
          "

      - name: Build and release
        run: npm run release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CSC_NAME: "Darren J Robinson"
          WIN_CSC_IDENTITY_AUTO_DISCOVERY: true
          NODE_OPTIONS: "--max-old-space-size=8192"
          
      - name: Upload build artifacts (on failure)
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: build-logs-windows-${{ github.run_number }}
          path: |
            dist/
            dist-release/
            *.log
            npm-debug.log*
            .npm/_logs/
